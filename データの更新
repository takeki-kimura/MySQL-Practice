#「データを1件追加する insert」
  ・構文
   - insert into
   -   テーブル名(列1,列2,列3, ...)
   - values
   -   (値1,値2,値3, ...);

  ※ 列リストとvalues句の値リストは、列数が一致している必要がある

  ・例)新商品を1件追加しする(商品名は新製品A、価格は1,000円)
   - insert into products (name, price) values ('新商品A', 1000);

#「列リストを省略してデータを1件追加する」
  ・例）
   - insert products values (1002, '新商品B', 2000)

    ・values句に列の定義順、カンマ区切りで値を設定
    ・テーブルの全列に対して、値を指定する必要がある

    ※ この書き方は、順番に並べる所や、全列指定しないといけない所がミスになりやすく、使い勝手が良くないので積極的には使わない
    ※ 他のメンバーがこのように書いたものを、読み解かなければならない可能性もあるので覚えておいた方がよい

# 「行を複数追加する」
  ・構文
   - insert into
   -   テーブル名(列1,列2,列3, ...)
   - values
   -   (値1,値2,値3, ...),
   -   (値1,値2,値3, ...),
   -   (値1,値2,値3, ...);

    ※ MySQL,PostgreSQL,SQL Server,DB2では使用可能
    ※ Oracleでは使えない

  ・例) 新商品3件をデータベースに追加する(商品名 新商品C, 価格 3,000円,商品名 新商品D 価格 4,000円,商品名 新商品E 価格 5,000円)
   - insert into 
   -   products (name, price)
   - values
   -   ('新商品C', 3000),
   -   ('新商品D', 4000),
   -   ('新商品E', 5000);

#「データの更新 update」
  ・構文
   - update テーブル名 set 列1 = 値1, [列2 = 値2...]
   - [where 条件式]

  ・例)全商品を10%引きに設定
   - set sql_safe_updates = 0;(セーフモードを解除。実務では注意)
   - update products set price = price * 0.9;

    ※ 実務でこのようなことを行うのは稀

#「特定の条件に合致する行のデータを更新」

  ・ポイント - update文とwhere句を使う

  ・例)商品id 3の商品名をSQL入門に、価格を1000に変える
   - update products set name = 'SQL入門1', price = 1000 where id = 3;

#「更新条件にサブクエリを使う」

  ・例)累計販売数が10を超えている商品については価格を5%UPする
   - select
   -   product_id,
   -   sum(product_qty)
   - from
   -   order_details
   - group by
   -   product_id
   - having
   -   sum(product_qty) >= 10;

   - update
   -   products
   - set
   -   price = price * 1.05
   - where
   -   id in
   -   (
   -   select
   - product_id
   - from
   -   order_details
   - group by
   -   product_id
   - having
   -   sum(product_qty) >= 10
   -   );

#「行の削除」
  ・構文
   - delete from テーブル名 [where 削除条件];

  ・例)商品に割り振られている商品カテゴリを使うのをやめるので、商品とカテゴリのひも付きを削除する
    • ポイント
    ・行を削除するdelete文を使う
    ・商品(products)とカテゴリ(categories)を紐付けている中間テーブルの、products_categoriesのデータを全て削除

   - select * from products_categories;
   - delete from products_categories;

   ※ deleteで削除したデータは、基本的には元に戻せない
   ※ 大量のデータをdeleteする時に予想外に時間が掛かる場合がある(10万件あたりから注意)

  • 条件を指定して行を削除
  ・例)商品ID1001は間違いで登録してしまったものなので削除する
   - delete from products where id = 1001;

    ※ where句を指定し忘れると、productsテーブル全体が削除対象となる

  • 削除条件にサブクエリを使う
   ※ MySQL,PostgreSQL,Oracle,SQL Serverでは使用可能
   ※ DB2では使えない
  
  ・例)1個も売れてない商品は売るのをやめるので削除する
   - select
   -   product_id
   - from
   -   order_details
   - group by
   -   product_id;
   
   - delete
   - from
   -   products
   - where
   -   id not in
   -     (
   -     select
   -       product_id
   -     from
   -       order_details
   -     group by
   -       product_id
   -     );